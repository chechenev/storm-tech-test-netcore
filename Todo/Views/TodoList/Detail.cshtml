@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Data
@using Todo.Views.TodoItem
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

@inject ApplicationDbContext dbContext

@section Scripts {
    <script type="text/javascript" src="~/js/details.js"></script>
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <ul class="list-group">

        <li class="list-group-item">
            <div class="form-group">
                <button type="button" id="createNewItemButton" class="btn btn-default">Create new item</button>
                <section class="createTodo-wrapper">
            <form method="post" name="createTodo">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(m => m.TodoItemCreateFields.TodoListTitle)
                @Html.HiddenFor(m => m.TodoItemCreateFields.TodoListId)

                <div class="form-group">
                    <label asp-for="TodoItemCreateFields.Title"></label>
                    <input asp-for="TodoItemCreateFields.Title" class="form-control" />
                    <span asp-validation-for="TodoItemCreateFields.Title" class="text-danger"></span>
                </div>


                <div class="form-group">
                    <label asp-for="TodoItemCreateFields.Importance"></label>
                    @Html.DropDownListFor(
                        m => m.TodoItemCreateFields.Importance,
                        SelectListConvenience.ImportanceSelectListItems,
                        new {@class="form-control"}
                        )
                    <span asp-validation-for="TodoItemCreateFields.Importance" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TodoItemCreateFields.ResponsiblePartyId"></label>
                    @Html.DropDownListFor(
                        m => m.TodoItemCreateFields.ResponsiblePartyId,
                        dbContext.UserSelectListItems(),
                        new {@class="form-control"}
                        )
                    <span asp-validation-for="TodoItemCreateFields.ResponsiblePartyId" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-default">Save</button>
                </div>

            </form>
        </section>

        <div class="alert alert-success hidden" id="createTodoSuccessMessage" role="alert">
            New todo item was succesfully created! <a href="javascript:window.location.reload();">Click here to reload the page</a>.
        </div>

        <div class="alert alert-danger hidden" id="createTodoErrorMessage" role="alert">
            Something went wrong. Error message:
        </div>
            
            </div>
        </li>

        <li class="list-group-item">
             <label>
                <input class="form-check-input me-1" type="checkbox" id="hideCompletedToggle" value="">
                Hide completed
            </label>
        </li>

        <li class="list-group-item">
            @if (Model.OrderByRank)
            {
                <div>Ordered by rank.</div>
                <a asp-action="Detail" asp-controller="TodoList" asp-route-todoListId="@Model.TodoListId" asp-route-orderByRank="false">
                    <strong>Order by importance</strong>
                </a>
            }
            else
            {
                <div>Ordered by importance.</div>
                <a asp-action="Detail" asp-controller="TodoList" asp-route-todoListId="@Model.TodoListId" asp-route-orderByRank="true">
                    <strong>Order by rank</strong>
                </a>
            }
        </li>

        @foreach (var item in Model.Items)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="list-group-item @contextualClass" id="item-@item.TodoItemId">
                
                <div class="row">

                <div class="col-md-8">
                    <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                        @if (item.IsDone)
                        {
                            <s>@item.Title</s>
                        }
                        else
                        {
                            <text>@item.Title</text>
                        }
                    </a>
                </div>

                <div class="col-md-4 text-right">
                    <small>
                        @item.ResponsibleParty.UserName

                        <img src="https://www.gravatar.com/avatar/@GravatarService.GetHash(item.ResponsibleParty.Email)?s=30"/>

                    </small>
                </div>
                </div>

            </li>
        }
    </ul>
</div>

<script type="text/javascript">
    const todoItems = @Json.Serialize(Model.Items);
</script>    